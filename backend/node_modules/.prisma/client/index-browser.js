
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  tokenExpiry: 'tokenExpiry',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.CPUScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  socket: 'socket',
  microarchitecture: 'microarchitecture',
  core_family: 'core_family',
  cores_total: 'cores_total',
  cores_performance: 'cores_performance',
  cores_efficiency: 'cores_efficiency',
  cores_threads: 'cores_threads',
  clock_base: 'clock_base',
  clock_boost: 'clock_boost',
  clock_eff_base: 'clock_eff_base',
  clock_eff_boost: 'clock_eff_boost',
  cache_l1: 'cache_l1',
  cache_l2: 'cache_l2',
  cache_l3: 'cache_l3',
  tdp: 'tdp',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  integrated_graphics: 'integrated_graphics',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CPUCoolerScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  cpu_sockets: 'cpu_sockets',
  height: 'height',
  fan_size: 'fan_size',
  water_cooled: 'water_cooled',
  fanless: 'fanless',
  radiator_size: 'radiator_size',
  fan_quantity: 'fan_quantity',
  min_fan_rpm: 'min_fan_rpm',
  max_fan_rpm: 'max_fan_rpm',
  min_noise_level: 'min_noise_level',
  max_noise_level: 'max_noise_level',
  color: 'color',
  max_tdp_support: 'max_tdp_support',
  rgb_lighting: 'rgb_lighting',
  pwm_control: 'pwm_control',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GPUScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  chipset_manufacturer: 'chipset_manufacturer',
  chipset: 'chipset',
  interface: 'interface',
  length: 'length',
  case_expansion_slot_width: 'case_expansion_slot_width',
  total_slot_width: 'total_slot_width',
  tdp: 'tdp',
  power_6_pin: 'power_6_pin',
  power_8_pin: 'power_8_pin',
  power_12vhpwr: 'power_12vhpwr',
  power_12v_2x6: 'power_12v_2x6',
  memory: 'memory',
  memory_type: 'memory_type',
  memory_bus: 'memory_bus',
  effective_memory_clock: 'effective_memory_clock',
  core_count: 'core_count',
  core_base_clock: 'core_base_clock',
  core_boost_clock: 'core_boost_clock',
  cooling: 'cooling',
  color: 'color',
  frame_sync: 'frame_sync',
  hdmi_2_1: 'hdmi_2_1',
  hdmi_2_0: 'hdmi_2_0',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  video_outputs: 'video_outputs',
  power_connectors: 'power_connectors',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MotherboardScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  socket: 'socket',
  chipset: 'chipset',
  form_factor: 'form_factor',
  memory_max: 'memory_max',
  memory_slots: 'memory_slots',
  memory_type: 'memory_type',
  pcie_x16_slots: 'pcie_x16_slots',
  pcie_x8_slots: 'pcie_x8_slots',
  pcie_x4_slots: 'pcie_x4_slots',
  pcie_x1_slots: 'pcie_x1_slots',
  pcie_gen: 'pcie_gen',
  m2_slots_total: 'm2_slots_total',
  m2_slots_pcie: 'm2_slots_pcie',
  m2_slots_sata: 'm2_slots_sata',
  sata_6gb_ports: 'sata_6gb_ports',
  sata_3gb_ports: 'sata_3gb_ports',
  usb_2_headers: 'usb_2_headers',
  usb_3_gen1_headers: 'usb_3_gen1_headers',
  usb_3_gen2_headers: 'usb_3_gen2_headers',
  usb_c_headers: 'usb_c_headers',
  wifi_integrated: 'wifi_integrated',
  bluetooth_integrated: 'bluetooth_integrated',
  ethernet_speed: 'ethernet_speed',
  audio_chipset: 'audio_chipset',
  audio_channels: 'audio_channels',
  ecc_support: 'ecc_support',
  raid_support: 'raid_support',
  overclocking_support: 'overclocking_support',
  bios_flashback: 'bios_flashback',
  clear_cmos: 'clear_cmos',
  dual_bios: 'dual_bios',
  color: 'color',
  rgb_lighting: 'rgb_lighting',
  back_connect: 'back_connect',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  pcie_slots_detailed: 'pcie_slots_detailed',
  m2_slots_detailed: 'm2_slots_detailed',
  back_panel_ports: 'back_panel_ports',
  usb_headers_detailed: 'usb_headers_detailed',
  storage_detailed: 'storage_detailed',
  onboard_ethernet: 'onboard_ethernet',
  bios_features: 'bios_features',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PCCaseScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  form_factor: 'form_factor',
  supports_atx: 'supports_atx',
  supports_matx: 'supports_matx',
  supports_mitx: 'supports_mitx',
  supports_eatx: 'supports_eatx',
  max_gpu_length: 'max_gpu_length',
  max_cpu_cooler_height: 'max_cpu_cooler_height',
  psu_included: 'psu_included',
  psu_form_factors: 'psu_form_factors',
  max_psu_length: 'max_psu_length',
  expansion_slots: 'expansion_slots',
  drive_bays_3_5: 'drive_bays_3_5',
  drive_bays_2_5: 'drive_bays_2_5',
  drive_bays_5_25: 'drive_bays_5_25',
  length: 'length',
  width: 'width',
  height: 'height',
  volume: 'volume',
  weight: 'weight',
  side_panel_type: 'side_panel_type',
  has_tempered_glass: 'has_tempered_glass',
  color: 'color',
  front_usb_2_0: 'front_usb_2_0',
  front_usb_3_0: 'front_usb_3_0',
  front_usb_3_1: 'front_usb_3_1',
  front_usb_3_2: 'front_usb_3_2',
  front_usb_c: 'front_usb_c',
  front_audio_ports: 'front_audio_ports',
  fan_mounts_120mm: 'fan_mounts_120mm',
  fan_mounts_140mm: 'fan_mounts_140mm',
  radiator_support_240mm: 'radiator_support_240mm',
  radiator_support_280mm: 'radiator_support_280mm',
  radiator_support_360mm: 'radiator_support_360mm',
  dust_filters: 'dust_filters',
  tool_free_installation: 'tool_free_installation',
  cable_management: 'cable_management',
  rgb_lighting: 'rgb_lighting',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  dimensions_detailed: 'dimensions_detailed',
  front_panel_detailed: 'front_panel_detailed',
  cooling_support: 'cooling_support',
  motherboard_support: 'motherboard_support',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PSUScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  wattage: 'wattage',
  form_factor: 'form_factor',
  length: 'length',
  width: 'width',
  height: 'height',
  connector_atx_24pin: 'connector_atx_24pin',
  connector_eps_8pin: 'connector_eps_8pin',
  connector_eps_4pin: 'connector_eps_4pin',
  connector_pcie_8pin: 'connector_pcie_8pin',
  connector_pcie_6pin: 'connector_pcie_6pin',
  connector_pcie_6plus2: 'connector_pcie_6plus2',
  connector_pcie_12vhpwr: 'connector_pcie_12vhpwr',
  connector_pcie_12v_2x6: 'connector_pcie_12v_2x6',
  connector_sata: 'connector_sata',
  connector_molex_4pin: 'connector_molex_4pin',
  connector_floppy_4pin: 'connector_floppy_4pin',
  efficiency_rating: 'efficiency_rating',
  efficiency_percent: 'efficiency_percent',
  modular_type: 'modular_type',
  fanless: 'fanless',
  fan_size: 'fan_size',
  operating_temp_max: 'operating_temp_max',
  ocp_protection: 'ocp_protection',
  ovp_protection: 'ovp_protection',
  opp_protection: 'opp_protection',
  scp_protection: 'scp_protection',
  rail_12v_amps: 'rail_12v_amps',
  rail_5v_amps: 'rail_5v_amps',
  rail_3_3v_amps: 'rail_3_3v_amps',
  color: 'color',
  rgb_lighting: 'rgb_lighting',
  certifications: 'certifications',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  connectors_detailed: 'connectors_detailed',
  power_rails: 'power_rails',
  protections: 'protections',
  dimensions_detailed: 'dimensions_detailed',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RAMScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  ram_type: 'ram_type',
  form_factor: 'form_factor',
  modules_quantity: 'modules_quantity',
  module_capacity: 'module_capacity',
  total_capacity: 'total_capacity',
  speed_mhz: 'speed_mhz',
  cas_latency: 'cas_latency',
  timing_trcd: 'timing_trcd',
  timing_trp: 'timing_trp',
  timing_tras: 'timing_tras',
  voltage: 'voltage',
  ecc_support: 'ecc_support',
  registered: 'registered',
  heat_spreader: 'heat_spreader',
  rgb_lighting: 'rgb_lighting',
  color: 'color',
  xmp_profile: 'xmp_profile',
  docp_profile: 'docp_profile',
  expo_profile: 'expo_profile',
  jedec_standard: 'jedec_standard',
  height_mm: 'height_mm',
  warranty_years: 'warranty_years',
  lifetime_warranty: 'lifetime_warranty',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  timings_detailed: 'timings_detailed',
  overclocking_profiles: 'overclocking_profiles',
  test_results: 'test_results',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StorageScalarFieldEnum = {
  id: 'id',
  opendb_id: 'opendb_id',
  name: 'name',
  manufacturer: 'manufacturer',
  series: 'series',
  part_numbers: 'part_numbers',
  variant: 'variant',
  release_year: 'release_year',
  capacity_gb: 'capacity_gb',
  capacity_tb: 'capacity_tb',
  storage_type: 'storage_type',
  is_nvme: 'is_nvme',
  is_ssd: 'is_ssd',
  form_factor: 'form_factor',
  interface: 'interface',
  interface_type: 'interface_type',
  interface_version: 'interface_version',
  rpm: 'rpm',
  read_speed_mbps: 'read_speed_mbps',
  write_speed_mbps: 'write_speed_mbps',
  cache_mb: 'cache_mb',
  tbw: 'tbw',
  mtbf_hours: 'mtbf_hours',
  power_consumption_watts: 'power_consumption_watts',
  best_price: 'best_price',
  best_price_url: 'best_price_url',
  best_price_store: 'best_price_store',
  price_updated_at: 'price_updated_at',
  all_prices: 'all_prices',
  price_scraping_status: 'price_scraping_status',
  retailer_skus: 'retailer_skus',
  raw_data: 'raw_data',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BuildScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  cpuId: 'cpuId',
  gpuId: 'gpuId',
  ramId: 'ramId',
  motherboardId: 'motherboardId',
  psuId: 'psuId',
  caseId: 'caseId',
  storageId: 'storageId',
  coolerId: 'coolerId',
  extra: 'extra'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  user: 'user',
  CPU: 'CPU',
  CPUCooler: 'CPUCooler',
  GPU: 'GPU',
  Motherboard: 'Motherboard',
  PCCase: 'PCCase',
  PSU: 'PSU',
  RAM: 'RAM',
  Storage: 'Storage',
  Build: 'Build'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
